/*
 * (C) 2001-2012 Marmalade. All Rights Reserved.
 *
 * This document is protected by copyright, and contains information
 * proprietary to Marmalade.
 *
 * This file consists of source code released by Marmalade under
 * the terms of the accompanying End User License Agreement (EULA).
 * Please do not use this program/source code before you have read the
 * EULA and have agreed to be bound by its terms.
 */
/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
#ifndef S3E_EXT_DIALOG_H
#define S3E_EXT_DIALOG_H

#include <s3eTypes.h>


/**
 * @addtogroup s3egroup
 * @{
 */

/**
 * @defgroup dialogapigroup S3E Dialog API Reference
 *
 * Allows the application to pull up an alert dialog box.
 *
 *
 * @supported{
 *             @platform{Android,android}
 *             @platform{iOS,ios}
 *             @platform{Windows Desktop,windows}
 *             @platform{Windows Desktop Simulator,windowssim}
 * }
 *
 *
 */

/**
 * @}
 * @addtogroup dialogapigroup
 * @{
 */

/**
 * Dialog Errors.
 *
 * @see s3eDialogGetError
 * @see s3eDialogGetErrorString
 * @par Required Header Files
 * s3eDialog.h
 */
typedef enum s3eDialogError
{
    S3E_DIALOG_ERR_NONE                   = 0,    ///< No Error
} s3eDialogError;

/**
 * Dialog Callbacks.
 *
 * @see s3eDialogRegister
 * @see s3eDialogUnRegister
 * @par Required Header Files
 * s3eDialog.h
 */
typedef enum s3eDialogCallback
{
    /**
     * Called when a dialog has finished with the number of the button clicked.
     * systemData: int buttonNumber
     * notificationResult: NULL.
     */
    S3E_DIALOG_FINISHED =  0,

    S3E_DIALOG_CALLBACK_MAX
} s3eDialogCallback;

/**
 * Describes an alert dialog box.
 *
 * @see s3eDialogAlertBox
 * @par Required Header Files:
 * s3eDialog.h
 */
struct s3eDialogAlertInfo
{
    const char* m_Message;    //!< text of the message to be displayed.
    const char* m_Title;      //!< text of the tile of the alert box.
    /**
     * Text of the 3 buttons.
     * If m_Button[1] is set to NULL only display 1 button
     * other wise if m_Button[2] is set to NULL only display 2 buttons.
     */
    const char* m_Button[3];
    int m_Id;                 //!< a user defined ID to identify which dialog box fired the callback

    s3eDialogAlertInfo() : m_Message("Put your Message here..."), m_Title("s3eDialog Alert Box"), m_Id(-1)
    {
        m_Button[0] = "OK";
        m_Button[1] = NULL;
        m_Button[2] = NULL;
    }
};

/**
 * Returned by the S3E_DIALOG_FINISHED callback
 *
 * @see s3eDialogAlertBox
 * @par Required Header Files:
 * s3eDialog.h
 */
struct s3eDialogCallbackData
{
    int m_Id;                 //!< the ID of the dialog box which fired the callback
    int m_ButtonPressed;      //!< the (0 based) index of the button which was pressed -1 if Dialog was dismissed with back button on Android
};
// \cond HIDDEN_DEFINES
S3E_BEGIN_C_DECL
// \endcond

/**
 * Returns S3E_TRUE if the Dialog extension is available.
 */
s3eBool s3eDialogAvailable();

/**
 * Retrieves the last error as a string, if any, for this subdevice. This
 * function is only available in debug builds.
 * @see s3eDialogGetError
 *
 * @remark This function, as opposed to s3eDialogGetError(), will always
 * return the last error no matter how many times it is called. This function
 * should not be relied upon to indicate whether an error has just occurred.
 *
 * @par Required Header Files
 * s3eDialog.h
 */
const char* s3eDialogGetErrorString();

/**
 * Retrieves the last error, if any, for this subdevice.
 * @see s3eDialogGetErrorString
 *
 * @remark Calling this function will retrieve the last error and then remove
 * it from memory; therefore, any further calls to this function will not
 * return an error unless a subsequent error has occurred.
 *
 * @par Required Header Files
 * s3eDialog.h
 */
s3eDialogError s3eDialogGetError();

/**
 * Register a callback.
 *
 * @param cbid ID of the event for which to register.
 * @param fn callback function.
 * @param userData Value to pass to the @e userdata parameter of @e NotifyFunc.
 * @return
 * - #S3E_RESULT_SUCCESS if no error occurred.
 * - #S3E_RESULT_ERROR if the operation failed.
 *   Call #s3eDialogGetError to retrieve an error code.
 * @par Required Header Files
 * s3eDialog.h
 */
s3eResult s3eDialogRegister(s3eDialogCallback cid, s3eCallback fn, void* userData);

/**
 * Unregister a callback.
 *
 * @param cbid ID of the callback for which to register.
 * @param fn Callback Function.
 * @return
 * - #S3E_RESULT_SUCCESS if no error occurred.
 * - #S3E_RESULT_ERROR if the operation failed.
 *   Call #s3eDialogGetError to retrieve an error code.
 * @see s3eDialogRegister
 */
s3eResult s3eDialogUnRegister(s3eDialogCallback cbid, s3eCallback fn);

/**
 * Display an alert dialog box to the user.
 * Result of the dialog box is returned from via the callback.
 *
 * @param info s3eDialogAlertInfo containing the Alert Box settings. Once the function returns
 * the info object may be disposed of safely.
 * @return whether the alert box was successfully started
 * @par Required Header Files
 * s3eDialog.h
 */
s3eResult s3eDialogAlertBox(s3eDialogAlertInfo* info);

// \cond HIDDEN_DEFINES
S3E_END_C_DECL
// \endcond

/** @} */

#endif /* !S3E_EXT_DIALOG_H */
